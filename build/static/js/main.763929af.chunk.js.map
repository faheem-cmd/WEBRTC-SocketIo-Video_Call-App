{"version":3,"sources":["assets/micmute.svg","assets/micunmute.svg","assets/webcam.svg","assets/webcamoff.svg","routes/CreateRoom.js","routes/Room.js","App.js","index.js"],"names":["module","exports","CreateRoom","props","onClick","id","uuid","history","push","Container","styled","div","Controls","ControlSmall","StyledVideo","img","video","Video","ref","useRef","useEffect","peer","on","stream","current","srcObject","playsInline","autoPlay","Room","useState","peers","setPeers","userUpdate","setUserUpdate","socketRef","userVideo","peersRef","roomID","match","params","videoConstraints","minAspectRatio","minFrameRate","height","window","innerHeight","width","innerWidth","io","connect","navigator","mediaDevices","getUserMedia","audio","then","emit","users","console","log","forEach","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","payload","incomingSignal","addPeer","peerObj","find","p","destroy","filter","muted","map","index","entry","audioFlag","videoFlag","key","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.763929af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/micmute.71c818c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/micunmute.d15ab7f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/webcam.9f0afb70.svg\";","module.exports = __webpack_public_path__ + \"static/media/webcamoff.f87f6879.svg\";","import React from \"react\";\nimport { v1 as uuid } from \"uuid\";\n\nconst CreateRoom = (props) => {\n    function create() {\n        const id = uuid();\n        props.history.push(`/room/${id}`);\n    }\n\n    return (\n        <button onClick={create}>Create room</button>\n    );\n};\n\nexport default CreateRoom;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport micmute from \"../assets/micmute.svg\";\nimport micunmute from \"../assets/micunmute.svg\";\nimport webcam from \"../assets/webcam.svg\";\nimport webcamoff from \"../assets/webcamoff.svg\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 20%;\n`;\n\nconst Controls = styled.div`\n  margin: 3px;\n  padding: 5px;\n  height: 27px;\n  width: 98%;\n  background-color: rgba(255, 226, 104, 0.1);\n  margin-top: -8.5vh;\n  filter: brightness(1);\n  z-index: 1;\n  border-radius: 6px;\n`;\n\nconst ControlSmall = styled.div`\n  margin: 3px;\n  padding: 5px;\n  height: 16px;\n  width: 98%;\n  margin-top: -6vh;\n  filter: brightness(1);\n  z-index: 1;\n  border-radius: 6px;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ImgComponent = styled.img`\n  cursor: pointer;\n  height: 25px;\n`;\n\nconst ImgComponentSmall = styled.img`\n  height: 15px;\n  text-align: left;\n  opacity: 0.5;\n`;\n\nconst StyledVideo = styled.video`\n  width: 400;\n  position: static;\n  height:800,\n  border-radius: 10px;\n  overflow: hidden;\n  margin: 1px;\n  border: 5px solid gray;\n`;\n\nconst Video = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    props.peer.on(\"stream\", (stream) => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n\n  return <StyledVideo playsInline autoPlay ref={ref} />;\n};\n\nconst Room = (props) => {\n  const [peers, setPeers] = useState([]);\n  const [audioFlag, setAudioFlag] = useState(true);\n  const [videoFlag, setVideoFlag] = useState(true);\n  const [userUpdate, setUserUpdate] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n  const videoConstraints = {\n    minAspectRatio: 1.333,\n    minFrameRate: 60,\n    height: window.innerHeight / 1.8,\n    width: window.innerWidth / 2,\n  };\n  useEffect(() => {\n    socketRef.current = io.connect(\"/\");\n    createStream();\n  }, []);\n\n  function createStream() {\n    navigator.mediaDevices\n      .getUserMedia({ video: videoConstraints, audio: true })\n      .then((stream) => {\n        userVideo.current.srcObject = stream;\n        socketRef.current.emit(\"join room\", roomID);\n        socketRef.current.on(\"all users\", (users) => {\n          console.log(users);\n          const peers = [];\n          users.forEach((userID) => {\n            const peer = createPeer(userID, socketRef.current.id, stream);\n            peersRef.current.push({\n              peerID: userID,\n              peer,\n            });\n            peers.push({\n              peerID: userID,\n              peer,\n            });\n          });\n          setPeers(peers);\n        });\n        socketRef.current.on(\"user joined\", (payload) => {\n          console.log(\"==\", payload);\n          const peer = addPeer(payload.signal, payload.callerID, stream);\n          peersRef.current.push({\n            peerID: payload.callerID,\n            peer,\n          });\n          const peerObj = {\n            peer,\n            peerID: payload.callerID,\n          };\n          setPeers((users) => [...users, peerObj]);\n        });\n\n        socketRef.current.on(\"user left\", (id) => {\n          const peerObj = peersRef.current.find((p) => p.peerID === id);\n          if (peerObj) {\n            peerObj.peer.destroy();\n          }\n          const peers = peersRef.current.filter((p) => p.peerID !== id);\n          peersRef.current = peers;\n          setPeers(peers);\n        });\n\n        socketRef.current.on(\"receiving returned signal\", (payload) => {\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\n          item.peer.signal(payload.signal);\n        });\n\n        socketRef.current.on(\"change\", (payload) => {\n          setUserUpdate(payload);\n        });\n      });\n  }\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal,\n      });\n    });\n\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"returning signal\", { signal, callerID });\n    });\n\n    peer.signal(incomingSignal);\n\n    return peer;\n  }\n\n  return (\n    <Container>\n      <StyledVideo muted ref={userVideo} autoPlay playsInline />\n      <Controls>\n        {/* <ImgComponent\n          src={videoFlag ? webcam : webcamoff}\n          onClick={() => {\n            if (userVideo.current.srcObject) {\n              userVideo.current.srcObject.getTracks().forEach(function (track) {\n                if (track.kind === \"video\") {\n                  if (track.enabled) {\n                    socketRef.current.emit(\"change\", [\n                      ...userUpdate,\n                      {\n                        id: socketRef.current.id,\n                        videoFlag: false,\n                        audioFlag,\n                      },\n                    ]);\n                    track.enabled = false;\n                    setVideoFlag(false);\n                  } else {\n                    socketRef.current.emit(\"change\", [\n                      ...userUpdate,\n                      {\n                        id: socketRef.current.id,\n                        videoFlag: true,\n                        audioFlag,\n                      },\n                    ]);\n                    track.enabled = true;\n                    setVideoFlag(true);\n                  }\n                }\n              });\n            }\n          }}\n        /> */}\n        &nbsp;&nbsp;&nbsp;\n        {/* <ImgComponent\n          src={audioFlag ? micunmute : micmute}\n          onClick={() => {\n            if (userVideo.current.srcObject) {\n              userVideo.current.srcObject.getTracks().forEach(function (track) {\n                if (track.kind === \"audio\") {\n                  if (track.enabled) {\n                    socketRef.current.emit(\"change\", [\n                      ...userUpdate,\n                      {\n                        id: socketRef.current.id,\n                        videoFlag,\n                        audioFlag: false,\n                      },\n                    ]);\n                    track.enabled = false;\n                    setAudioFlag(false);\n                  } else {\n                    socketRef.current.emit(\"change\", [\n                      ...userUpdate,\n                      {\n                        id: socketRef.current.id,\n                        videoFlag,\n                        audioFlag: true,\n                      },\n                    ]);\n                    track.enabled = true;\n                    setAudioFlag(true);\n                  }\n                }\n              });\n            }\n          }}\n        /> */}\n      </Controls>\n      {peers.map((peer, index) => {\n        let audioFlagTemp = true;\n        let videoFlagTemp = true;\n        if (userUpdate) {\n          userUpdate.forEach((entry) => {\n            if (peer && peer.peerID && peer.peerID === entry.id) {\n              audioFlagTemp = entry.audioFlag;\n              videoFlagTemp = entry.videoFlag;\n            }\n          });\n        }\n        return (\n          <div key={peer.peerID}>\n            <Video peer={peer.peer} />\n            <ControlSmall>\n              {/* <ImgComponentSmall src={videoFlagTemp ? webcam : webcamoff} /> */}\n              &nbsp;&nbsp;&nbsp;\n              {/* <ImgComponentSmall src={audioFlagTemp ? micunmute : micmute} /> */}\n            </ControlSmall>\n          </div>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Room;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./routes/CreateRoom\";\nimport Room from \"./routes/Room\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={CreateRoom} />\n        <Route path=\"/room/:roomID\" component={Room} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}